# .github/workflows/deploy-to-ecr.yml
name: deploy-image-to-ecr

on:
  push:
    branches:
      - main
      - development

env:
  AWS_REGION: eu-west-2

jobs:
  test:
    name: Run Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test,lint]

      - name: Run tests
        # This command will discover and run tests in the 'tests' directory.
        # The test_scraper.py includes a Docker build in its setUpClass,
        # which is fine as Docker is available on ubuntu-latest runners.
        run: python -m unittest discover tests

  build_and_push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test # Ensures tests pass before building and pushing
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      packages: write # Needed to interact with container registries

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }} # Use a repository secret for the IAM role ARN
          # Ensure this AWS_REGION is consistent or also made dynamic if needed
          # For now, using a fixed one as per original.
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR repository based on branch
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ECR_REPOSITORY_NAME=base-scraper-lambda" >> $GITHUB_ENV
          else
            echo "ECR_REPOSITORY_NAME=base-scraper-lambda/dev" >> $GITHUB_ENV
          fi

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./
        run: |
          IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY"
          echo "Building and pushing image: $IMAGE_NAME with tags $IMAGE_TAG and latest"
          docker build -t "$IMAGE_NAME:$IMAGE_TAG" -t "$IMAGE_NAME:latest" .
          docker push --all-tags "$IMAGE_NAME"
          echo "Successfully pushed image: $IMAGE_NAME"
